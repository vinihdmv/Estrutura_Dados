 #include<stdio.h>
#include<stdlib.h>
#include<time.h>

/* Algoritmo de Dijkstra */


///Program que implementa a ordena√ßao topologica de um grafo////

////declaraco d tamamnhondo grafo

const int QTDVERTICES =500;

////func que cria o grafo


void criar(int grafo[QTDVERTICES][QTDVERTICES],int aleatorio){
    int i=0;
    int j=0;
    int conexao=0;

    for(i=0;i<QTDVERTICES;i++){
        for(j=0;j<QTDVERTICES;j++){
            grafo[i][j]=0;

            if(aleatorio){
             conexao=(rand()%2);

            }else{
                printf("DIGITE <1> se %d esta conectado a %d: ",i,j);
                scanf("%d",&conexao);

            }
            grafo[i][j]=conexao;

        }
}
}



///Func recursiva que ordena topologicamente o grafo




void ordenarTopologicoRecursivo(int grafo[QTDVERTICES][QTDVERTICES],int visitado[QTDVERTICES],int vertice){

    int i;

    visitado[vertice]=1;

    for(i=0;i<QTDVERTICES;i++){
    if((grafo[vertice][i])&&(! visitado[i])){
     ordenarTopologicoRecursivo(grafo,visitado,i);


    }

}

    printf("%d\t",vertice);


}




//////func que ordena topologacmente o grafo


void ordenarTopologico (int grafo[QTDVERTICES][QTDVERTICES]){

        int vertice;
        int visitado[QTDVERTICES];

        for(vertice=0;vertice<QTDVERTICES;vertice++){
         visitado[vertice]=0;

        }


        for(vertice=0;vertice<QTDVERTICES;vertice++){
         if(! visitado[vertice]){
            ordenarTopologicoRecursivo(grafo,visitado,vertice);
         }

    }

        printf("\n");
}


//////func principal de execucao do programa


int main(){

    time_t t;
    srand((unsigned)time(&t));

    int grafo[QTDVERTICES][QTDVERTICES];


    criar(grafo,1);

    ordenarTopologico(grafo);

}

