#include <stdio.h>
#include <stdlib.h>
#include <string.h>

////////////////////////////////////////
///////////Arvore Rubro-Negra///////////
////////////////////////////////////////

////////////declaracao de estruturas///////


struct no {
    int numero;
    struct no *esquerda;
    struct no *direita;
    int cor;  //0-preto  1-vermelho
};

//////////////////////////////////////////
//funcao querotaciona a arvore a esquerda/


struct no *rotacionarEsquerda(struct no *raiz){
    //Rotacao propriamente dita
    struct no *temp = raiz -> direita;
    raiz -> direita = temp -> esquerda;
    temp -> esquerda =raiz;

    //ajuste de cor

    temp-> cor = raiz ->cor;
    raiz-> cor = 1;

    //retorno
    return temp;
}


//////////////////////////////////////////
//funcao querotaciona a arvore a direita/

struct no *rotacionarDireita(struct no *raiz){
    //Rotacao propriamente dita
    struct no *temp = raiz -> esquerda;
    raiz -> esquerda = temp -> direita;
    temp -> direita =raiz;

    //ajuste de cor

    temp-> cor = raiz ->cor;
    raiz-> cor = 1;

    //retorno
    return temp;
}

/////////////////////////////////////
///func que sobr evermelho bna arvore////
/////////////////////////////////////

void subirVermelho(struct no *raiz){

    raiz-> cor =1;
    raiz->esquerda -> cor =0;
    raiz->direita -> cor =0;

}


////func que determina a cor do no////

int vermelho(struct no *raiz){

    int retorno =0;

    if (raiz!=NULL){
        retorno=raiz-> cor;

    }
    return retorno;
}


///func que insere um no na arvore///


struct no *inserir(struct no *raiz,int numero){
    ///inserecao d aarcore de buisca
    if(raiz==NULL){
        raiz= (struct no *)malloc(sizeof(struct no));
        raiz-> numero = numero;
        raiz-> esquerda = NULL;
        raiz-> direita = NULL;
        raiz-> cor = 1;
    } else {
        if (numero < raiz -> numero){
            raiz-> esquerda = inserir (raiz->esquerda,numero);
        }else{
            raiz -> direita = inserir(raiz-> direita, numero);
        }
    }

    //balanceamento

    if((! vermelho (raiz->esquerda)) &&  (vermelho(raiz-> direita))){
        raiz= rotacionarEsquerda(raiz);

    }
    if (vermelho(raiz-> esquerda)&& vermelho (raiz-> esquerda -> esquerda)){
        raiz = rotacionarDireita(raiz);
    }
    if(vermelho(raiz->esquerda)&& vermelho(raiz ->direita)){
        subirVermelho(raiz);
    }

    return raiz;
}

    void imprimir (struct no *raiz,char *endentacao){
    if(raiz!=NULL){
            printf("%s%d (%c)\n", endentacao, raiz -> numero, (vermelho(raiz) ? 'V' : 'P'));

            char *temp = (char *) malloc (1024 * sizeof(char));
            strcpy(temp, "...");
            strcat (temp,endentacao);

            imprimir(raiz->esquerda, temp);
            imprimir(raiz->direita, temp);
    }

    }


 /////// func principal  de execuicaqco do rplograkawm/////



 int main(){

    struct no *raiz = NULL;
    int i =0;
    for (i=0;i<10;i++){
    raiz= inserir(raiz,i);

    }
    imprimir(raiz, "");
 }
